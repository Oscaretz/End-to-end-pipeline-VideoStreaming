version: '3.7'

services:

  # Airflow Services: Database Container.
  postgres-airflow:
    image: postgres:13
    container_name: airflow_postgres_db
    environment:
      - POSTGRES_USER=airflow_db_user
      - POSTGRES_PASSWORD=airflow_db_password
      - POSTGRES_DB=airflow_db
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow_db_user -d airflow_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Airflow Services: Init Container.
  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_init
    depends_on:
      - postgres-airflow
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_db_user:airflow_db_password@postgres-airflow:5432/airflow_db
    entrypoint: >
      /bin/bash -c "
      airflow db migrate &&
      airflow users create --username ${AIRFLOW_USER} --firstname Air --lastname Flow --role Admin --email airflow@example.com --password ${AIRFLOW_PASSWORD}
      "
    networks:
      - backend

  # Airflow Services: Web Server Container.
  airflow-webserver:
    user: "${UID}:${GID}"
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_webserver
    restart: always
    depends_on:
      - postgres-airflow
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_db_user:airflow_db_password@postgres-airflow:5432/airflow_db
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__API__AUTH_BASIC_USERNAME=${AIRFLOW_USER}
      - AIRFLOW__API__AUTH_BASIC_PASSWORD=${AIRFLOW_PASSWORD}
      - MSSQL_SERVER=${MSSQL_SERVER}
      - MSSQL_DATABASE=${MSSQL_DATABASE}
      - MSSQL_USER=user
      - MSSQL_PASSWORD=${MSSQL_PASSWORD}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./sql:/opt/airflow/sql
      - ./config.py:/opt/airflow/config.py
      - ./requirements.txt:/opt/airflow/requirements.txt
    ports:
      - "8080:8080"
    command: airflow webserver
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Airflow Services: Scheduler Container.
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - postgres-airflow
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_db_user:airflow_db_password@postgres-airflow:5432/airflow_db
      - MSSQL_SERVER=${MSSQL_SERVER}
      - MSSQL_DATABASE=${MSSQL_DATABASE}
      - MSSQL_USER=${MSSQL_USER}
      - MSSQL_PASSWORD=${MSSQL_PASSWORD}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./sql:/opt/airflow/sql
      - ./config.py:/opt/airflow/config.py
      - ./requirements.txt:/opt/airflow/requirements.txt

    command: airflow scheduler
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'airflow scheduler'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MsSQLServer Database Container
  mssql-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql_db
    depends_on:
      - airflow-init
    restart: always
    environment:
      SA_PASSWORD: Password_airflow10
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Developer"
    ports:
      - "${MSSQL_PORT}:1433"
    networks:
      - backend
    volumes:
      - mssql_data:/var/opt/mssql  # Volumen persistente para SQL Server

networks:
  backend:
    driver: bridge

volumes:
  mssql_data:
  logs:
